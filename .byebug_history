continue
send _limitable_thresholds, aspect, role_or_owner
continue
send _limitable_thresholds, aspect, role_or_owner
continue
send _limitable_thresholds, aspect, role_or_owner
continue
send _limitable_thresholds, aspect, role_or_owner
role_or_owner
aspect
continue
limits
continue
from_limit_definitions aspect, role_or_owner
next
aspect
limits
next
limits
continue
limits
continue
_limitable_thresholds
s
_limitable_threshold
aspect
limits
next
limits
continue
aspect
continue
aspect
continue
role_or_owner
aspect
exit
n
scope
n
keys
n
LimitDefinition.count
limits
n
time_field
owner
aspect
exit
_limitable_thresholds
limits
role_or_owner
aspect
exit
owner
aspect
up
role_or_owner
role_or_user
aspect
exit
user.role
user
aspect
exit
@@cached[aspect]
continue
m
next
@@cached[aspect]
@@cached
aspect
exit
LimitDefinition.where(aspect: "test1", role: "pro")
LimitDefinition.limits_config("test2")
LimitDefinition.limits_config("test1")
LimitDefinition.where(role: "pro")
LimitDefinition.all
LimitDefinition.count
exit
ld.allowance
ld
exit
scope.to_sql
scope.to_sqal
LimitableModel.last.created_at.class
LimitableModel.last.created_at
LimitableModel.last
self
self.class
self.limitable_models
exit
@user.limitable_models.first
scope.first.at_time.class
scope.first.at_time.to_i
scope.first.at_time
scope.first
scope.size
exit
scope.group("at_time")
scope.first
scope.size
scope.to_sql
exit
scope.size
counts
exit
Time.now.to_i
Time.now.utc.to_i
Time.now.utc
Time.current
Time.now
34.seconds.ago
@user.limitable_models.last
@user.limitable_models.first
@user.limitable_models
method
exit
self.singleton_methods.sort
self.singleton_methods
self.static_methods
self.class_methods
self.class_method(m)
self.method(m)
self.methods.sort
self.methods
self
m
